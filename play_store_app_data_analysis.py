# -*- coding: utf-8 -*-
"""play store app data analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d_NhsElCkVF0ov4iyInWQPFiMOxI1H4J
"""

import pandas as pd
import plotly.express as px

df_apps = pd.read_csv('apps.csv')

df_apps.shape

df_apps.head()

df_apps.sample(5)

df_apps.drop(['Last_Updated','Android_Ver'],axis=1, inplace= True)
#its one time shit

df_apps.head()

Nan_rows = df_apps[df_apps.Rating.isna()]
print(Nan_rows.shape)
Nan_rows.head()

df_apps_clean  =df_apps.dropna()
df_apps_clean.shape

df_apps_clean.head()

duplicated_rows = df_apps_clean[df_apps_clean.duplicated()]
print(duplicated_rows.shape)
duplicated_rows.head()

df_apps_clean.drop_duplicates()

df_apps_clean[df_apps_clean.App == 'Subway Surfers']

df_apps_clean = df_apps_clean.drop_duplicates(subset=['App','Type','Price'])
df_apps_clean[df_apps_clean.App == 'Instagram']

df_apps_clean.shape

df_apps_clean.sort_values('Rating',ascending=False).head()

df_apps_clean.sort_values('Size_MBs',ascending=False).head()

ratings = df_apps_clean.Content_Rating.value_counts()
ratings

fig = px.pie(labels=ratings.index, values=ratings.values,
             title='Content Rating',
             names=ratings.index,
             )
fig.update_traces(textposition='outside',textinfo='percent+ label')
fig.show()

fig = px.pie(labels=ratings.index, values=ratings.values,
             title='Content Rating',
             names=ratings.index,
             hole=0.6,
             )
fig.update_traces(textposition='outside',textinfo='percent+ label')
fig.show()

df_apps_clean.Installs.info()

df_apps_clean.Installs.describe()

df_apps_clean.info()

df_apps_clean.Installs = df_apps_clean.Installs.astype(str).str.replace(",","")
df_apps_clean.Installs = pd.to_numeric(df_apps_clean.Installs)
df_apps_clean[['App','Installs']].groupby('Installs').count()

df_apps_clean.head()

df_apps_clean.tail()

df_apps_clean.Price = df_apps_clean.Price.astype(str).str.replace('$',"")
df_apps_clean.Price = pd.to_numeric(df_apps_clean.Price)
df_apps_clean.sort_values('Price',ascending=False).head(20)

df_apps_clean = df_apps_clean[df_apps_clean['Price']<250]
df_apps_clean.sort_values('Price',ascending=False).head(5)

df_apps_clean['Revenue_Estimate']=df_apps_clean.Installs.mul(df_apps_clean.Price)
df_apps_clean.sort_values('Revenue_Estimate',ascending=False)[:10]

df_apps_clean.Category.nunique()

top10_category = df_apps_clean.Category.value_counts()[:10]

top10_category

bar = px.bar(x=top10_category.index,
             y=top10_category.values)
bar.show()

category_install = df_apps_clean.groupby('Category').agg({'Installs':pd.Series.sum})
category_install.sort_values('Installs',ascending=True,inplace=True)

h_bar = px.bar(x=category_install.Installs,
               y=category_install.index,
               orientation='h')
h_bar.show()

h_bar = px.bar(x=category_install.Installs,
               y=category_install.index,
               orientation='h',
               title='Category Popularity')
h_bar.update_layout(xaxis_title='Number of Downloads',
                    yaxis_title='Category')
h_bar.show()

cat_number = df_apps_clean.groupby('Category').agg({'App':pd.Series.count})

cat_merged_df = pd.merge(cat_number,category_install,on='Category',how='inner')

cat_merged_df.shape

cat_merged_df.head()

cat_merged_df.sort_values('Installs',ascending=False)

scatter = px.scatter(cat_merged_df,
                     x='App',
                     y='Installs',
                     title="Category Concentration",
                     size="App",
                     hover_name=cat_merged_df.index,
                     color='Installs')

scatter.update_layout(xaxis_title="Number of Apps(lower=more concentrated)",
                      yaxis_title="Installs",
                      yaxis = dict(type='log'))
scatter.show()

df_apps_clean.Genres.unique()

len(df_apps_clean.Genres.unique())

df_apps_clean.Genres.value_counts().sort_values(ascending=True)[:5]#now remove the signs

df_apps_clean.Genres.value_counts().sort_values(ascending=False)[:5]

stack = df_apps_clean.Genres.str.split(';',expand=True).stack()
stack.shape

num_generes = stack.value_counts()

num_generes.shape

num_generes.head()

len(num_generes)

bar = px.bar(x=num_generes.index[:15],
             y=num_generes.values[:15],
             title="Top generes",
             hover_name=num_generes.index[:15],
             color=num_generes.values[:15],
             color_continuous_scale='Agsunset')

bar.show()